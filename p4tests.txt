Test 1 should return 15 when running A's main.


class A {
  var x = 5;
  var y = 10;

  static function main() {
    var a = new A();
    return a.x + a.y;
  }
}

Test 2 should return 12 when running A's main.


class A {

  function add(g, h) {
    return g + h;
  }

  static function main() {
    var a = new A();
    return a.add(10, 2);
  }
}

Test 3 should return 125 when running A's main.


class A {

  var x = 100;

  function add(x) {
    return this.x + x;
  }

  static function main() {
    var a = new A();
    return a.add(25);
  }
}

Test 4 should return 36 when running A's main.


class A {

  var x = 100;

  function setX(x) {
    this.x = x;
  }

  function add(a) {
    return a.x + this.x;
  }

  static function main() {
    var a1 = new A();
    var a2 = new A();
    a1.setX(30);
    a2.setX(6);
    return a1.add(a2);
  }
}

Test 5 should return 54 when running A's main.


class A {

  var x = 100;

  function setX(x) {
    this.x = x;
  }

  function getX() {
    return this.x;
  }

  function add(a) {
    return a.getX() + this.getX();
  }

  static function main() {
    var a1 = new A();
    var a2 = new A();
    a1.setX(50);
    a2.setX(4);
    return a1.add(a2);
  }
}

Test 6 should return 110 when running A's main.


class A {

  var x = 100;
  var y = 10;

  function add(g, h) {
    return g + h;
  }

  static function main() {
    return new A().add(new A().x, new A().y);
  }
}

Test 7 should return 26 when running C's main.


class A {
  var x = 1;
  var y = 2;

  function m() {
    return this.m2();
  }

  function m2() {
    return x+y;
  }
}

class B extends A {
  var y = 22;
  var z = 3;

  function m() {
    return super.m();
  }

  function m2() {
    return x+y+z;
  }
}

class C extends B {
  var y = 222;
  var w = 4;

  function m() {
    return super.m();
  }

  static function main() {
    return new C().m();
  }
}

Test 8 should return 117 when running Square's main.


class Shape {
  function area() {
    return 0;
  }
}

class Rectangle extends Shape {
  var height;
  var width;

  function setHeight(h) {
    height = h;
  }

  function setWidth(w) {
    width = w;
  }

  function getHeight() {
    return height;
  }

  function getWidth() {
    return width;
  }

  function area() {
    return getWidth() * getHeight();
  }
}

class Square extends Rectangle {
  function setSize(size) {
    super.setWidth(size);
  }

  function getHeight() {
    return super.getWidth();
  }

  function setHeight(h) {
    super.setWidth(h);
  }

  static function main() {
    var s = new Square();
    var sum = 0;
    s.setSize(10);
    sum = sum + s.area();
    s.setHeight(4);
    sum = sum + s.area();
    s.setWidth(1);
    sum = sum + s.area();
    return sum;
  }
}

Test 9 should return 32 when running Square's main.


class Shape {
  function area() {
    return 0;
  }

  function largerThan(s) {
    return this.area() > s.area();
  }
}

class Rectangle extends Shape {
  var height;
  var width;

  function setHeight(h) {
    height = h;
  }

  function setWidth(w) {
    width = w;
  }

  function getHeight() {
    return height;
  }

  function getWidth() {
    return width;
  }

  function area() {
    return getWidth() * getHeight();
  }
}

class Square extends Rectangle {
  function setSize(size) {
    super.setWidth(size);
  }

  function getHeight() {
    return super.getWidth();
  }

  function setHeight(h) {
    super.setWidth(h);
  }

  static function main() {
    var s1 = new Square();
    var s2 = new Rectangle();
    var s3 = new Square();
    s1.setSize(5);
    s2.setHeight(8);
    s2.setWidth(4);
    s3.setWidth(3);

    var max = s1;
    if (s2.largerThan(max))
      max = s2;
    if (s3.largerThan(max))
      max = s3;

    return max.area();
  }
}

Test 10 should return 15 when running List's main.


class List {
  var val;
  var next;

  function getNext() {
    return next;
  }

  function setNext(x) {
    if (x == 0)
      next = 0;
    else {
      next = new List();
      next.setVal(val+1);
      next.setNext(x-1);
    }
  }

  function setVal(x) {
    val = x;
  }

  static function main() {
    var l = new List();
    l.setVal(10);
    l.setNext(5);
    return l.getNext().getNext().getNext().getNext().getNext().val;
  }
}
Test 11 should return 123456 when running List's main

class List {
  var val;
  var next;

  function getNext() {
    return next;
  }

  function setNext(next) {
    this.next = next;
  }

  function makeList(x) {
    if (x == 0)
      next = 0;
    else {
      next = new List();
      next.setVal(val+1);
      next.makeList(x-1);
    }
  }

  function setVal(x) {
    val = x;
  }

  function reverse() {
    if (getNext() == 0)
      return this;
    else
      return getNext().reverse().append(this);
  }

  function append(x) {
    var p = this;
    while (p.getNext() != 0)
      p = p.getNext();
    p.setNext(x);
    x.setNext(0);
    return this;
  }

  static function main() {
    var l = new List();
    l.setVal(1);
    l.makeList(5);
    l = l.reverse();

    var result = 0;
    var p = l;
    var c = 1;
    while (p != 0) {
      result = result + c * p.val;
      c = c * 10;
      p = p.getNext();
    }
    return result;
  }
}
Test 12 should return 5285 when running List's main.

class List {
  var val;
  var next;

  function getNext() {
    return next;
  }

  function makeList(x) {
    if (x == 0)
      next = 0;
    else {
      next = new List();
      next.setVal(getVal()+1);
      next.makeList(x-1);
    }
  }

  function setVal(x) {
    val = x;
  }

  function getVal() {
    return val;
  }

  function expand() {
    var p = this;
    while (p != 0) {
      function exp(a) {
        while (a != 0) {
          this.setVal(this.getVal() + p.getVal() * a.getVal());
          a = a.getNext();
        }
      }
      exp(p);
      p = p.getNext();
    }
  }


  static function main() {
    var l = new List();
    l.val = 1;
    l.makeList(5);
    l.expand();
    return l.getVal();
  }
}
Test 13 should return -716 when run with C's main.


class A {
  var count = 0;

  function subtract(a, b) {
    if (a < b) {
       throw b - a;
    }
    else
       return a - b;
  }
}

class B extends A {
  function divide(a, b) {
    if (b == 0)
      throw a;
    else
      return a / b;
  }

  function reduce(a, b) {
    while (a > 1 || a < -1) {
      try {
        a = divide(a, b);
        if (a == 2)
          break;
      }
      catch (e) {
        return subtract(a, b);
      }
      finally {
        count = count + 1;
      }
    }
    return a;
  }
}

class C {
  function main() {
    var x;
    var b;

    b = new B();

    try {
      x = b.reduce(10, 5);
      x = x + b.reduce(81, 3);
      x = x + b.reduce(5, 0);
      x = x + b.reduce(-2, 0);
      x = x + b.reduce(12, 4);
    }
    catch (a) {
      x = x * a;
    }
    finally {
      x = -1 * x;
    }
    return x - b.count * 100;
  }
}
